{"version":3,"file":"data-table.component.js","sourceRoot":"","sources":["../../src/data-table/data-table.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormArray, FormControl } from '@angular/forms';\n\nimport { Status } from '..';\nimport { Select, SelectService, Question, QuestionType } from '../question';\nimport { Group, DataTable } from '../group';\nimport { ReactiveFormsFactory } from '../factory';\n\n@Component({\n  selector: 'rb-data-table',\n  template: `\n    <fieldset *ngIf=\"Status['READY'] === status\" class=\"rb-data-table rb-data-table-{{ group.code }}\" [formGroup]=\"formGroup\"\n      [ngClass]=\"{ 'read-only': readOnly }\">\n      <legend>\n        <span [ngClass]=\"{ 'required-control': group.isRequired() && !readOnly }\">\n          {{ group.title }}\n        </span>\n        {{ group.description }}\n      </legend>\n\n      <div class=\"table-responsive\">\n        <table class=\"table table-bordered table-striped table-hover\">\n          <thead>\n            <tr>\n              <th class=\"text-center\" *ngFor=\"let question of group.questions[0]\">\n                <span [ngClass]=\"{ 'required-control': question.isRequired() && !readOnly }\">\n                  {{ question.description }}\n                </span>\n              </th>\n              <th class=\"text-center\" *ngIf=\"!readOnly\">\n                {{ 'ACTION' | translate }}\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr [formGroup]=\"newFormGroup\" *ngIf=\"!readOnly\">\n              <td *ngFor=\"let question of group.questions[0]\">\n                <ng-container [ngSwitch]=\"question.type\">\n\n                  <ng-template ngSwitchCase=\"checkbox\">\n                    <div class=\"checkbox\">\n                      <label>\n                        <input type=\"checkbox\" [name]=\"question.name\" [formControlName]=\"question.name\" />\n                        {{ question.description }}\n                      </label>\n                      <rb-validation-message [validations]=\"question.validations\"\n                                             [control]=\"newFormGroup.get(question.name)\"\n                                             [submitted]=\"submitted\">\n                      </rb-validation-message>\n                    </div> <!--/.checkbox-->\n                  </ng-template> <!--/checkbox-->\n\n                  <ng-template ngSwitchCase=\"radio\">\n                    <div class=\"radio\" *ngFor=\"let option of question.options\">\n                      <label>\n                        <input type=\"radio\" [name]=\"question.name\" [value]=\"option\" [formControlName]=\"question.name\" />\n                        {{ option }}\n                      </label>\n                    </div> <!--/.radio-->\n                    <rb-validation-message [validations]=\"question.validations\"\n                                           [control]=\"newFormGroup.get(question.name)\"\n                                           [submitted]=\"submitted\">\n                    </rb-validation-message>\n                  </ng-template> <!--/radio-->\n\n                  <ng-template ngSwitchCase=\"select\">\n                    <select [id]=\"question.name\" class=\"form-control\" [name]=\"question.name\" #selectQuestion\n                          [formControlName]=\"question.name\"\n                          (change)=\"onChangeOptionSelect(selectQuestion, newFormGroup.get(question.name), question)\">\n                      <option disabled [value]=\"null\">\n                        {{ question.placeholder ? question.placeholder : '' }}\n                      </option>\n                      <option *ngFor=\"let option of question.options\" [value]=\"option['value'] || option\">\n                        {{ option['description'] || option }}\n                      </option>\n                    </select>\n                    <ng-container *ngIf=\"question.editableOption && question.editableOption.length\">\n                      <input [hidden]=\"question.editableOption !== selectQuestion.value\"\n                             type=\"text\" [id]=\"question.name\" class=\"form-control editable-option\" [name]=\"question.name\"\n                             [formControlName]=\"question.name\" />\n                    </ng-container>\n                    <rb-validation-message [validations]=\"question.validations\"\n                                           [control]=\"newFormGroup.get(question.name)\"\n                                           [submitted]=\"submitted\">\n                    </rb-validation-message>\n                  </ng-template> <!--/select-->\n\n                  <ng-template ngSwitchCase=\"textarea\">\n                    <textarea [id]=\"question.name\" class=\"form-control\" [name]=\"question.name\" rows=\"5\"\n                              placeholder=\"{{ question.placeholder ? question.placeholder : '' }}\"\n                              [formControlName]=\"question.name\">\n                    </textarea>\n                    <rb-validation-message [validations]=\"question.validations\"\n                                           [control]=\"newFormGroup.get(question.name)\"\n                                           [submitted]=\"submitted\">\n                    </rb-validation-message>\n                  </ng-template> <!--/textarea-->\n\n                  <ng-template ngSwitchCase=\"text\" ngSwitchDefault>\n                    <input type=\"text\" [id]=\"question.name\" class=\"form-control\" [name]=\"question.name\"\n                            placeholder=\"{{ question.placeholder ? question.placeholder : '' }}\"\n                            [formControlName]=\"question.name\" [mask]=\"question.mask\" />\n                    <rb-validation-message [validations]=\"question.validations\"\n                                           [control]=\"newFormGroup.get(question.name)\"\n                                           [submitted]=\"submitted\">\n                    </rb-validation-message>\n                  </ng-template> <!--/text-->\n\n                </ng-container> <!--/ngSwitch-questionType-->\n              </td>\n              <td class=\"text-center\">\n                <button class=\"btn btn-default btn-add-data\" (click)=\"addData()\">\n                  <i class=\"rb-ico rb-ico-add\" aria-hidden=\"true\"></i>\n                  {{ 'ADD' | translate }}\n                </button>\n              </td>\n            </tr>\n            <tr class=\"data\" *ngFor=\"let data of formArray?.value; let indexData = index\">\n              <td *ngFor=\"let key of getKeysFromObject(data)\" [class.text-center]=\"isCheckbox(getQuestionByName(key))\">\n                <ng-container [ngSwitch]=\"getQuestionByName(key).type\">\n                  <ng-template ngSwitchCase=\"checkbox\">\n                    <i class=\"rb-ico rb-ico-square rb-ico-{{ data[key] ? 'checked' : 'unchecked' }}\" aria-hidden=\"true\"></i>\n                  </ng-template>\n\n                  <ng-template ngSwitchDefault>\n                    {{ data[key] || 'NOT_INFORMED' | translate }}\n                  </ng-template>\n                </ng-container>\n              </td>\n              <td class=\"text-center\" *ngIf=\"!readOnly\">\n                <button class=\"btn btn-default btn-remove-data\" (click)=\"removeData(indexData)\">\n                  <i class=\"rb-ico rb-ico-remove\" aria-hidden=\"true\"></i>\n                  {{ 'REMOVE' | translate }}\n                </button>\n              </td>\n            </tr>\n            <tr *ngIf=\"readOnly && !formArray?.value.length\">\n              <td [attr.colspan]=\"group.questions[0].length\" class=\"text-center\">{{ 'NO_REGISTERS' | translate }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div> <!--/.table-responsive-->\n      <rb-validation-message [validations]=\"group.validations\"\n                             [control]=\"formArray\"\n                             [submitted]=\"formGroupSubmitted\">\n      </rb-validation-message>\n    </fieldset>\n  `,\n})\nexport class DataTableComponent implements OnInit {\n\n  public readonly Status: Object = Status;\n\n  public formArray: FormArray;\n  public newFormGroup: FormGroup;\n  public submitted: boolean = false;\n\n  @Input() public formGroup: FormGroup;\n  @Input() public group: DataTable;\n  @Input() public formGroupSubmitted: boolean = false;\n  @Input() public readOnly: boolean = false;\n\n  @Output() public error: EventEmitter<Error> = new EventEmitter();\n  @Output() public ready: EventEmitter<boolean> = new EventEmitter();\n\n  private _status: Status;\n\n  public ngOnInit(): void {\n    this.formArray = <FormArray>this.formGroup.get(this.group.code);\n\n    if (this.formArray) {\n      this._status = Status.LOADING;\n      this.load()\n        .then(() => {\n          this._status = Status.READY;\n          this.ready.emit();\n        })\n        .catch((error: Error) => {\n          this._status = Status.ERROR;\n          this.error.emit(error);\n        });\n    }\n  }\n\n  public onChangeOptionSelect(htmlFormControl: HTMLInputElement, formControl: FormControl, question: Select): void {\n    SelectService.onChangeOption(htmlFormControl, formControl, question);\n  }\n\n  public getKeysFromObject(object: Object): string[] {\n    return Object.keys(object);\n  }\n\n  public addData(): void {\n    this.submitted = true;\n\n    if (!this.newFormGroup.valid) {\n      return;\n    }\n\n    this.formArray.push(Object.assign(new FormGroup({}), this.newFormGroup));\n    this.resetForms();\n  }\n\n  public removeData(index: number): void {\n    this.formArray.removeAt(index);\n  }\n\n  public resetForms(): void {\n    this.newFormGroup.reset();\n    this.submitted = false;\n  }\n\n  public getQuestionByName(name: string): Question<any> {\n    for (const question of this.group.questions[0]) {\n      if (name === question.name) {\n        return question;\n      }\n    }\n\n    return null;\n  }\n\n  public isCheckbox(question: Question<any>): boolean {\n    return QuestionType.CHECKBOX === question.type;\n  }\n\n  public get status(): Status {\n    return this._status;\n  }\n\n  private async load(): Promise<void> {\n    return new Promise<void>(async (resolve: () => void, reject: (error: Error) => void) => {\n      try {\n        this.newFormGroup = await ReactiveFormsFactory.createFormGroupFromQuestions(this.group.questions[0], false);\n\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n"]}