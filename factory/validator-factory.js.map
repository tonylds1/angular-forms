{"version":3,"file":"validator-factory.js","sourceRoot":"","sources":["../../src/factory/validator-factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAIzD,IAAA;IAEE,0BAA2B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;KAAK;IAE/C,+CAAoB,GAA3B;QACE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;KACzB;IAEM,6CAAkB,GAAzB;QACE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAO,IAAI,CAAC,UAAW,CAAC,KAAK,CAAC,CAAC;KACrD;IAEM,6CAAkB,GAAzB;QACE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAO,IAAI,CAAC,UAAW,CAAC,KAAK,CAAC,CAAC;KACrD;IAEM,mDAAwB,GAA/B;QACE,MAAM,CAAC,UAAU,CAAC,SAAS,CAAa,IAAI,CAAC,UAAW,CAAC,KAAK,CAAC,CAAC;KACjE;IAEM,mDAAwB,GAA/B;QACE,MAAM,CAAC,UAAU,CAAC,SAAS,CAAa,IAAI,CAAC,UAAW,CAAC,KAAK,CAAC,CAAC;KACjE;IAEM,iDAAsB,GAA7B;QACE,IAAM,KAAK,GAAqB,IAAI,CAAC,UAAW,CAAC,KAAK,CAAC;QAEvD,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAM,YAAY,GAAW,mBAAmB,CAAC;YACjD,IAAM,OAAO,GAAW,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC1D,IAAM,KAAK,GAAW,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAExD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;SACvD;QAED,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAClC;IAEM,kDAAuB,GAA9B;QACE,MAAM,CAAC,CAAY,IAAI,CAAC,UAAW,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC;KAClG;2BA5CH;IA6CC,CAAA;AAzCD,4BAyCC","sourcesContent":["import { ValidatorFn, Validators } from '@angular/forms';\n\nimport { Validation, Email, Max, Min, MaxLength, MinLength, Pattern, Required } from '../validation';\n\nexport class ValidatorFactory {\n\n  public constructor(private validation: Validation) { }\n\n  public createEmailValidator(): ValidatorFn {\n    return Validators.email;\n  }\n\n  public createMaxValidator(): ValidatorFn {\n    return Validators.max((<Max>this.validation).value);\n  }\n\n  public createMinValidator(): ValidatorFn {\n    return Validators.min((<Min>this.validation).value);\n  }\n\n  public createMaxLengthValidator(): ValidatorFn {\n    return Validators.maxLength((<MaxLength>this.validation).value);\n  }\n\n  public createMinLengthValidator(): ValidatorFn {\n    return Validators.minLength((<MinLength>this.validation).value);\n  }\n\n  public createPatternValidator(): ValidatorFn {\n    const value: string = (<Pattern>this.validation).value;\n\n    if (value.startsWith('/')) {\n      const valuePattern: RegExp = /\\/(.*)\\/([gim]+)?/;\n      const pattern: string = value.replace(valuePattern, '$1');\n      const flags: string = value.replace(valuePattern, '$2');\n\n      return Validators.pattern(new RegExp(pattern, flags));\n    }\n\n    return Validators.pattern(value);\n  }\n\n  public createRequiredValidator(): ValidatorFn {\n    return !(<Required>this.validation).requiredTrue ? Validators.required : Validators.requiredTrue;\n  }\n}\n"]}