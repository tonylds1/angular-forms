{"version":3,"file":"validation-factory.js","sourceRoot":"","sources":["../../src/factory/validation-factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAc,cAAc,EAAE,MAAM,eAAe,CAAC;AAErH,IAAA;;;IAEgB,kCAAgB,GAA9B,UAA+B,UAAsB;QACnD,MAAM,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YACxB,KAAK,cAAc,CAAC,KAAK;gBACvB,MAAM,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACvC,KAAK,cAAc,CAAC,GAAG;gBACrB,MAAM,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,EAAQ,UAAW,CAAC,KAAK,CAAC,CAAC;YAC9D,KAAK,cAAc,CAAC,UAAU;gBAC5B,MAAM,CAAC,IAAI,SAAS,CAAC,UAAU,CAAC,OAAO,EAAc,UAAW,CAAC,KAAK,CAAC,CAAC;YAC1E,KAAK,cAAc,CAAC,GAAG;gBACrB,MAAM,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,EAAQ,UAAW,CAAC,KAAK,CAAC,CAAC;YAC9D,KAAK,cAAc,CAAC,UAAU;gBAC5B,MAAM,CAAC,IAAI,SAAS,CAAC,UAAU,CAAC,OAAO,EAAc,UAAW,CAAC,KAAK,CAAC,CAAC;YAC1E,KAAK,cAAc,CAAC,OAAO;gBACzB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,EAAY,UAAW,CAAC,KAAK,CAAC,CAAC;YACtE,KAAK,cAAc,CAAC,QAAQ;gBAC1B,MAAM,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC3C;KACF;IAEa,sCAAoB,GAAlC,UAAmC,cAA4B;QAC7D,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,UAAC,UAAsB,IAAK,OAAA,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAA9C,CAA8C,CAAC,CAAC;KACvG;4BAzBH;IA0BC,CAAA;AAxBD,6BAwBC","sourcesContent":["import { Email, Max, MaxLength, Min, MinLength, Pattern, Required, Validation, ValidationType } from '../validation';\n\nexport class ValidationFactory {\n\n  public static createValidation(validation: Validation): Validation {\n    switch (validation.type) {\n      case ValidationType.EMAIL:\n        return new Email(validation.message);\n      case ValidationType.MAX:\n        return new Max(validation.message, (<Max>validation).value);\n      case ValidationType.MAX_LENGTH:\n        return new MaxLength(validation.message, (<MaxLength>validation).value);\n      case ValidationType.MIN:\n        return new Min(validation.message, (<Min>validation).value);\n      case ValidationType.MIN_LENGTH:\n        return new MinLength(validation.message, (<MinLength>validation).value);\n      case ValidationType.PATTERN:\n        return new Pattern(validation.message, (<Pattern>validation).value);\n      case ValidationType.REQUIRED:\n        return new Required(validation.message);\n    }\n  }\n\n  public static createValidationList(validationList: Validation[]): Validation[] {\n    return validationList.map((validation: Validation) => ValidationFactory.createValidation(validation));\n  }\n}\n"]}