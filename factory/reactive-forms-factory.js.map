{"version":3,"file":"reactive-forms-factory.js","sourceRoot":"","sources":["../../src/factory/reactive-forms-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormGroup, FormArray, FormControl, ValidatorFn, Validators } from '@angular/forms';\n\nimport { Group, GroupType, Fieldset, DataTable } from '../group';\nimport { Choice, Question } from '../question';\nimport { Validation, MinLength, MaxLength, Pattern, Required, Min, Max } from '../validation';\nimport {\n  ValidatorFactoryHandler, RequiredValidator, EmailValidator, MaxValidator, MinValidator,\n  MaxLengthValidator, MinLengthValidator, PatternValidator\n} from '../chain-of-responsibility/validator-factory';\nimport { ValidationTypeNotFoundError } from '../chain-of-responsibility/validator-factory/error';\n\nexport class ReactiveFormsFactory {\n\n  public static async createFormGroupFromGroups(groups: Group<any>[]): Promise<FormGroup> {\n    return new Promise<FormGroup>(async (resolve: (formGroup: FormGroup) => void, reject: (error: string) => void) => {\n      try {\n        const formGroup: FormGroup = new FormGroup({});\n\n        for (const group of await Promise.all(groups)) {\n          let control: FormGroup | FormArray;\n\n          if (GroupType.FIELDSET === group.type) {\n            control = await ReactiveFormsFactory.createFormGroupFromQuestions((<Fieldset>group).questions);\n          } else {\n            control = await ReactiveFormsFactory.createFormArrayFromQuestions((<DataTable>group).questions.slice(1));\n\n            if ((<DataTable>group).validations && 0 < (<DataTable>group).validations.length) {\n              control.setValidators(await ReactiveFormsFactory.createValidators((<DataTable>group).validations));\n            }\n          }\n\n          formGroup.addControl(group.code, control);\n        }\n\n        resolve(formGroup);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public static async createFormGroupFromQuestions(questions: Question<any>[], checkDisabledQuestions: boolean = true): Promise<FormGroup> {\n    return new Promise<FormGroup>(async (resolve: (formGroup: FormGroup) => void, reject: (error: Error) => void) => {\n      try {\n        const formGroup: FormGroup = new FormGroup({});\n\n        for (const question of await Promise.all(questions)) {\n          const validators: ValidatorFn[] = await ReactiveFormsFactory.createValidators(question.validations);\n          const answer: any = !question.answer && (<Choice>question).defaultOption ? (<Choice>question).defaultOption : question.answer;\n          const formState: any = { value: answer, disabled: checkDisabledQuestions && question.disabled };\n          const control: FormControl = new FormControl(formState, validators);\n\n          if (question.validations && 0 < question.validations.length) {\n            control.setValidators(await ReactiveFormsFactory.createValidators(question.validations));\n          }\n\n          formGroup.addControl(question.name, control);\n        }\n\n        resolve(formGroup);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public static async createFormArrayFromQuestions(questions: Question<any>[][]): Promise<FormArray> {\n    return new Promise<FormArray>(async (resolve: (formArray: FormArray) => void, reject: (error: Error) => void) => {\n      try {\n        const formArray: FormArray = new FormArray([]);\n\n        for (const question of await Promise.all(questions)) {\n          const group: FormGroup = new FormGroup({});\n\n          for (const column of question) {\n            group.addControl(column.name, new FormControl(column.answer));\n          }\n\n          formArray.push(group);\n        }\n\n        resolve(formArray);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public static async createValidators(validations: Validation[]): Promise<ValidatorFn[]> {\n    return new Promise<ValidatorFn[]>(async (resolve: (validators: ValidatorFn[]) => void, reject: (error: Error) => void) => {\n      try {\n        const validators: ValidatorFn[] = [];\n\n        for (const validation of await Promise.all(validations)) {\n          const validatorFactoryHandler: ValidatorFactoryHandler = (new RequiredValidator())\n            .append(new EmailValidator())\n            .append(new MaxValidator())\n            .append(new MinValidator())\n            .append(new MaxLengthValidator())\n            .append(new MinLengthValidator())\n            .append(new PatternValidator());\n\n          const validatorFn: ValidatorFn = validatorFactoryHandler.handle(validation);\n          validators.push(validatorFn);\n        }\n\n        resolve(validators);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n"]}